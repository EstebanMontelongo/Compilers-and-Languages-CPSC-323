Token: 	 Identifier Lexem: 	x
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>
Token: 	 Operators Lexem: 	=
Token: 	 Seperators Lexem: 	(
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> (<Expression>)
Token: 	 Identifier Lexem: 	a
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Operators Lexem: 	+
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime>
Token: 	 Identifier Lexem: 	b
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Seperators Lexem: 	)
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token: 	 Operators Lexem: 	*
<Term Prime> -> * <Factor> <Term Prime>
Token: 	 Seperators Lexem: 	(
<Factor> -> (<Expression>)
Token: 	 Identifier Lexem: 	z
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Operators Lexem: 	+
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime>
Token: 	 Identifier Lexem: 	w
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Seperators Lexem: 	)
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token: 	 Seperators Lexem: 	;
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token: 	 Identifier Lexem: 	z
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>
Token: 	 Operators Lexem: 	=
Token: 	 Valid Integer Lexem: 	5
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Number>
Token: 	 Operators Lexem: 	+
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime>
Token: 	 Identifier Lexem: 	b
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Seperators Lexem: 	;
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token: 	 Identifier Lexem: 	a
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>
Token: 	 Operators Lexem: 	=
Token: 	 Identifier Lexem: 	e
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Operators Lexem: 	-
<Term Prime> -> epsilon
<Expression Prime> -> - <Term> <Expression Prime>
Token: 	 Identifier Lexem: 	f
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Seperators Lexem: 	;
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token: 	 Identifier Lexem: 	b
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>
Token: 	 Operators Lexem: 	=
Token: 	 Identifier Lexem: 	t
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Operators Lexem: 	+
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime>
Token: 	 Identifier Lexem: 	n
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier> 
Token: 	 Seperators Lexem: 	;
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Finished!
